{"version":3,"file":"617.bundle.js","mappings":"4JAAA,QAAgBA,IACd,MAAMC,EAAWC,SAASC,cAAc,YAIxC,OAFAF,EAASG,UAAYJ,EAAKK,OAEnBJ,EAASK,QAAQC,iBACzB,ECoHcC,eAAeC,EAAcC,EAASC,EAAMC,GACzDA,EAAcR,UAAY,GAC1B,MAAMS,QAAaH,GAzHrB,SAA+BG,EAAMD,GACnCA,EAAcE,YACZ,EAAmB,yEAEaD,EAAKE,SAASC,SACxCH,EAAKE,SAASE,+CAEO,EAAAC,EAAA,IACrB,EAAAC,EAAA,GAAMN,EAAKO,QAAQC,aAAc,mBAAoB,IAAIC,MACzD,4DAKV,CA4GEC,CAAsBV,EAAMD,GA1G9B,SAA8BC,EAAMD,EAAeD,GACjD,MAAMS,EAAUP,EAAKO,QACfI,EAAYJ,EAAQI,UACpBC,EAAuB,MAATd,EAAeS,EAAQM,OAASN,EAAQO,OACtDC,EACK,MAATjB,EAAeS,EAAQS,YAAcT,EAAQU,YAC/ClB,EAAcE,YACZ,EAAmB,kEAEDU,EAAUO,kEACMN,KAAed,EAAKqB,4GAEfR,EAAUS,+DACDL,KAAiBjB,EAAKqB,6DAK1E,CAyFEE,CAAqBrB,EAAMD,EAAeD,GAvF5C,SAAqCE,EAAMD,EAAeD,GACxD,MAAMS,EAAUP,EAAKO,QACfe,EAAWtB,EAAKsB,SAASC,YAAY,GACrCC,EACK,MAAT1B,GACwB,WAAnBS,EAAQkB,UAAwBC,QAAQ,GAAK,MAC9CnB,EAAQoB,SAAW,MACnBC,EAAsB,MAAT9B,EAAeS,EAAQsB,OAAStB,EAAQuB,UACrDC,EAAkB,CACtB,CAAC,OAAQP,GACT,CAAC,WAAYjB,EAAQyB,SAAW,KAChC,CAAC,WAAYzB,EAAQ0B,IACrB,CAAC,aAAcL,EAAa,MAC5B,CAAC,aAAcrB,EAAQ2B,MAAQ,KAC/B,CAAC,iBAAkBZ,EAASa,IAAIC,qBAAuB,KACvD,CAAC,UAAWd,EAASe,MAAMC,SAC3B,CAAC,SAAUhB,EAASe,MAAME,QAC1B,CAAC,aAAcjB,EAASe,MAAMG,aAEhCzC,EAAcE,YACZ,EAAmB,wGAGX8B,EACCU,KACCC,GAAU,6DAEgBA,EAAO,gDACRA,EAAO,0CAIjCC,KAAK,8CAKlB,CAmDEC,CAA4B5C,EAAMD,EAAeD,GAjDnD,SAA8BE,EAAMD,EAAeD,GACjD+C,QAAQC,IAAI9C,GACZD,EAAcE,YACZ,EAAmB,oJAIX,MACA,IAAI8C,EAAe,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMC,EAAoBjD,EAAKsB,SAASC,YAAYyB,GAC9CE,EACK,MAATpD,EACImD,EAAkBd,IAAIgB,UACtBF,EAAkBd,IAAIiB,UACtBC,EACK,MAATvD,EACImD,EAAkBd,IAAImB,UACtBL,EAAkBd,IAAIoB,UACtBC,EACK,MAAT1D,GACyC,WAApCmD,EAAkBd,IAAIsB,aAA2B/B,QAAQ,GAC1DuB,EAAkBd,IAAIuB,YAC5BX,EAAaY,KAAK,0GAGS,EAAAtD,EAAA,IACvB,EAAAC,EAAA,GAAM2C,EAAkBW,KAAM,aAAc,IAAInD,MAChD,4DAEyByC,KAAepD,EAAKqB,wEACdkC,KAAWvD,EAAKqB,wEAChBqC,kDAGrC,CACA,OAAOT,EAAaJ,KAAK,GAC1B,EA9BC,2CAmCZ,CAQEkB,CAAqB7D,EAAMD,EAAeD,EAC5C,C","sources":["webpack://weather-app/./src/modules/html-elements-factory.js","webpack://weather-app/./src/modules/render-data.js"],"sourcesContent":["export default (html) => {\n  const template = document.createElement(\"template\");\n\n  template.innerHTML = html.trim();\n\n  return template.content.firstElementChild;\n};\n","import { parse, format } from 'date-fns';\r\nimport htmlElementFactory from './html-elements-factory';\r\n\r\nfunction renderCurrentLocation(data, targetElement) {\r\n  targetElement.appendChild(\r\n    htmlElementFactory(`\r\n      <section class=\"location\">\r\n        <h1 class=\"location-name\">${data.location.name}, ${\r\n          data.location.country\r\n        }</h1>\r\n        <p class=\"date-time\">${format(\r\n          parse(data.current.last_updated, 'yyyy-MM-dd HH:mm', new Date()),\r\n          'EEEE, MMMM dd, yyyy - HH:mm'\r\n        )}</p>\r\n      </section>\r\n  `)\r\n  );\r\n}\r\n\r\nfunction renderCurrentWeather(data, targetElement, unit) {\r\n  const current = data.current;\r\n  const condition = current.condition;\r\n  const temperature = unit === 'c' ? current.temp_c : current.temp_f;\r\n  const feelsLikeTemp =\r\n    unit === 'c' ? current.feelslike_c : current.feelslike_f;\r\n  targetElement.appendChild(\r\n    htmlElementFactory(`\r\n      <section class=\"current-weather\">\r\n          <img src=\"${condition.icon}\" alt=\"weatherImg\" />\r\n          <div class=\"current-temp\">${temperature}째${unit.toUpperCase()}</div>\r\n          <div class=\"current-temp-desc\">\r\n            <p class=\"weather-condition\">${condition.text}</p>\r\n            <p class=\"weather-feeling\">Feels like ${feelsLikeTemp}째${unit.toUpperCase()}</p>\r\n          </div>\r\n      </section>\r\n  `)\r\n  );\r\n}\r\n\r\nfunction renderCurrentWeatherDetails(data, targetElement, unit) {\r\n  const current = data.current;\r\n  const forecast = data.forecast.forecastday[0];\r\n  const wind =\r\n    unit === 'c'\r\n      ? (current.wind_kph * 0.277777778).toFixed(1) + 'm/s'\r\n      : current.wind_mph + 'mph';\r\n  const visibility = unit === 'c' ? current.vis_km : current.vis_miles;\r\n  const detailsFromData = [\r\n    ['Wind', wind],\r\n    ['Humidity', current.humidity + '%'],\r\n    ['UV index', current.uv],\r\n    ['Visibility', visibility + 'km'],\r\n    ['Cloudiness', current.cloud + '%'],\r\n    ['Chance of rain', forecast.day.daily_chance_of_rain + '%'],\r\n    ['Sunrise', forecast.astro.sunrise],\r\n    ['Sunset', forecast.astro.sunset],\r\n    ['Moon phase', forecast.astro.moon_phase],\r\n  ];\r\n  targetElement.appendChild(\r\n    htmlElementFactory(`\r\n      <section class=\"current-weather-details\">\r\n          <ol class=\"weather-details\">\r\n          ${detailsFromData\r\n            .map(\r\n              detail => `\r\n            <li>\r\n              <p class=\"detail-title\">${detail[0]}</p>\r\n              <p class=\"detail-data\">${detail[1]}</p>\r\n            </li>\r\n          `\r\n            )\r\n            .join('')}\r\n          </ol>\r\n      </section>\r\n  `)\r\n  );\r\n}\r\n\r\nfunction renderWeeklyForecast(data, targetElement, unit) {\r\n  console.log(data);\r\n  targetElement.appendChild(\r\n    htmlElementFactory(`\r\n      <section class=\"weekly-forecast\">\r\n        <h2 class=\"forecast-title\">Weekly Forecast</h2>\r\n        <ol class=\"days-of-week\">\r\n          ${(() => {\r\n            let listElements = [];\r\n            for (let i = 1; i < 9; i++) {\r\n              const dayObjectFromData = data.forecast.forecastday[i];\r\n              const avarageTemp =\r\n                unit === 'c'\r\n                  ? dayObjectFromData.day.avgtemp_c\r\n                  : dayObjectFromData.day.avgtemp_f;\r\n              const minTemp =\r\n                unit === 'c'\r\n                  ? dayObjectFromData.day.mintemp_c\r\n                  : dayObjectFromData.day.mintemp_f;\r\n              const maxWind =\r\n                unit === 'c'\r\n                  ? (dayObjectFromData.day.maxwind_kph * 0.277777778).toFixed(1)\r\n                  : dayObjectFromData.day.maxwind_mph;\r\n              listElements.push(`            \r\n            <li>\r\n              <p class=\"day\">\r\n                <span class=\"day-name\">${format(\r\n                  parse(dayObjectFromData.date, 'yyyy-MM-dd', new Date()),\r\n                  'EEEE'\r\n                )}</span>\r\n                <span class=\"daily-temp\">${avarageTemp}째${unit.toUpperCase()}</span>\r\n                <span class=\"daily-night-temp\">${minTemp}째${unit.toUpperCase()}</span>\r\n                <span class=\"daily-wind-speed\">${maxWind}</span>\r\n              </p>\r\n            </li>`);\r\n            }\r\n            return listElements.join('');\r\n          })()}\r\n        </ol>\r\n      </section>\r\n  `)\r\n  );\r\n}\r\n\r\nexport default async function renderWeather(fetchFn, unit, targetElement) {\r\n  targetElement.innerHTML = '';\r\n  const data = await fetchFn;\r\n  renderCurrentLocation(data, targetElement);\r\n  renderCurrentWeather(data, targetElement, unit);\r\n  renderCurrentWeatherDetails(data, targetElement, unit);\r\n  renderWeeklyForecast(data, targetElement, unit);\r\n}\r\n"],"names":["html","template","document","createElement","innerHTML","trim","content","firstElementChild","async","renderWeather","fetchFn","unit","targetElement","data","appendChild","location","name","country","format","parse","current","last_updated","Date","renderCurrentLocation","condition","temperature","temp_c","temp_f","feelsLikeTemp","feelslike_c","feelslike_f","icon","toUpperCase","text","renderCurrentWeather","forecast","forecastday","wind","wind_kph","toFixed","wind_mph","visibility","vis_km","vis_miles","detailsFromData","humidity","uv","cloud","day","daily_chance_of_rain","astro","sunrise","sunset","moon_phase","map","detail","join","renderCurrentWeatherDetails","console","log","listElements","i","dayObjectFromData","avarageTemp","avgtemp_c","avgtemp_f","minTemp","mintemp_c","mintemp_f","maxWind","maxwind_kph","maxwind_mph","push","date","renderWeeklyForecast"],"sourceRoot":""}