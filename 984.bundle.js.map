{"version":3,"file":"984.bundle.js","mappings":"sIAAA,QAAgBA,IACd,MAAMC,EAAWC,SAASC,cAAc,YAIxC,OAFAF,EAASG,UAAYJ,EAAKK,OAEnBJ,EAASK,QAAQC,iBACzB,EC4GcC,eAAeC,EAAcC,EAASC,EAAMC,GACzDA,EAAcR,UAAY,GAC1B,MAAMS,QAAaH,GAlHrB,SAA+BG,EAAMD,GACnCA,EAAcE,YACZ,EAAmB,yEAEaD,EAAKE,SAASC,SAASH,EAAKE,SAASE,8CAC1CJ,EAAKK,QAAQC,0CAI5C,CA0GEC,CAAsBP,EAAMD,GAxG9B,SAA8BC,EAAMD,EAAeD,GACjD,MAAMO,EAAUL,EAAKK,QACfG,EAAYH,EAAQG,UACpBC,EAAuB,MAATX,EAAeO,EAAQK,OAASL,EAAQM,OACtDC,EACK,MAATd,EAAeO,EAAQQ,YAAcR,EAAQS,YAC/Cf,EAAcE,YACZ,EAAmB,kEAEDO,EAAUO,kEACMN,KAAeX,EAAKkB,4GAEfR,EAAUS,+DACDL,KAAiBd,EAAKkB,6DAK1E,CAuFEE,CAAqBlB,EAAMD,EAAeD,GArF5C,SAAqCE,EAAMD,EAAeD,GACxD,MAAMO,EAAUL,EAAKK,QACfc,EAAWnB,EAAKmB,SAASC,YAAY,GACrCC,EACK,MAATvB,GACwB,WAAnBO,EAAQiB,UAAwBC,QAAQ,GAAK,MAC9ClB,EAAQmB,SAAW,MACnBC,EAAsB,MAAT3B,EAAeO,EAAQqB,OAASrB,EAAQsB,UACrDC,EAAkB,CACtB,CAAC,OAAQP,GACT,CAAC,WAAYhB,EAAQwB,SAAW,KAChC,CAAC,WAAYxB,EAAQyB,IACrB,CAAC,aAAcL,EAAa,MAC5B,CAAC,aAAcpB,EAAQ0B,MAAQ,KAC/B,CAAC,iBAAkBZ,EAASa,IAAIC,qBAAuB,KACvD,CAAC,UAAWd,EAASe,MAAMC,SAC3B,CAAC,SAAUhB,EAASe,MAAME,QAC1B,CAAC,iBAAkBjB,EAASe,MAAMG,aAEpCtC,EAAcE,YACZ,EAAmB,wGAGX2B,EACCU,KACCC,GAAU,6DAEgBA,EAAO,gDACRA,EAAO,0CAIjCC,KAAK,8CAKlB,CAiDEC,CAA4BzC,EAAMD,EAAeD,GA/CnD,SAA8BE,EAAMD,EAAeD,GACjD4C,QAAQC,IAAI3C,GACZD,EAAcE,YACZ,EAAmB,oJAIX,MACA,IAAI2C,EAAe,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMC,EAAoB9C,EAAKmB,SAASC,YAAYyB,GAC9CE,EACK,MAATjD,EACIgD,EAAkBd,IAAIgB,UACtBF,EAAkBd,IAAIiB,UACtBC,EACK,MAATpD,EACIgD,EAAkBd,IAAImB,UACtBL,EAAkBd,IAAIoB,UACtBC,EACK,MAATvD,GACyC,WAApCgD,EAAkBd,IAAIsB,aAA2B/B,QAAQ,GAC1DuB,EAAkBd,IAAIuB,YAC5Bb,QAAQC,IAAIG,GACZF,EAAaY,KAAK,yGAGSV,EAAkBW,yDAChBV,KAAejD,EAAKkB,wEACdkC,KAAWpD,EAAKkB,wEAChBqC,kDAGrC,CACA,OAAOT,EAAaJ,KAAK,GAC1B,EA5BC,2CAiCZ,CAQEkB,CAAqB1D,EAAMD,EAAeD,EAC5C,C","sources":["webpack://weather-app/./src/modules/html-elements-factory.js","webpack://weather-app/./src/modules/render-data.js"],"sourcesContent":["export default (html) => {\n  const template = document.createElement(\"template\");\n\n  template.innerHTML = html.trim();\n\n  return template.content.firstElementChild;\n};\n","import htmlElementFactory from './html-elements-factory';\r\n\r\nfunction renderCurrentLocation(data, targetElement) {\r\n  targetElement.appendChild(\r\n    htmlElementFactory(`\r\n      <section class=\"location\">\r\n        <h1 class=\"location-name\">${data.location.name}, ${data.location.country}</h1>\r\n        <p class=\"date-time\">${data.current.last_updated}</p>\r\n      </section>\r\n  `)\r\n  );\r\n}\r\n\r\nfunction renderCurrentWeather(data, targetElement, unit) {\r\n  const current = data.current;\r\n  const condition = current.condition;\r\n  const temperature = unit === 'c' ? current.temp_c : current.temp_f;\r\n  const feelsLikeTemp =\r\n    unit === 'c' ? current.feelslike_c : current.feelslike_f;\r\n  targetElement.appendChild(\r\n    htmlElementFactory(`\r\n      <section class=\"current-weather\">\r\n          <img src=\"${condition.icon}\" alt=\"weatherImg\" />\r\n          <div class=\"current-temp\">${temperature}째${unit.toUpperCase()}</div>\r\n          <div class=\"current-temp-desc\">\r\n            <p class=\"weather-condition\">${condition.text}</p>\r\n            <p class=\"weather-feeling\">Feels like ${feelsLikeTemp}째${unit.toUpperCase()}</p>\r\n          </div>\r\n      </section>\r\n  `)\r\n  );\r\n}\r\n\r\nfunction renderCurrentWeatherDetails(data, targetElement, unit) {\r\n  const current = data.current;\r\n  const forecast = data.forecast.forecastday[0];\r\n  const wind =\r\n    unit === 'c'\r\n      ? (current.wind_kph * 0.277777778).toFixed(1) + 'm/s'\r\n      : current.wind_mph + 'mph';\r\n  const visibility = unit === 'c' ? current.vis_km : current.vis_miles;\r\n  const detailsFromData = [\r\n    ['Wind', wind],\r\n    ['Humidity', current.humidity + '%'],\r\n    ['UV index', current.uv],\r\n    ['Visibility', visibility + 'km'],\r\n    ['Cloudiness', current.cloud + '%'],\r\n    ['Chance of rain', forecast.day.daily_chance_of_rain + '%'],\r\n    ['Sunrise', forecast.astro.sunrise],\r\n    ['Sunset', forecast.astro.sunset],\r\n    ['Waxing Gibbous', forecast.astro.moon_phase],\r\n  ];\r\n  targetElement.appendChild(\r\n    htmlElementFactory(`\r\n      <section class=\"current-weather-details\">\r\n          <ol class=\"weather-details\">\r\n          ${detailsFromData\r\n            .map(\r\n              detail => `\r\n            <li>\r\n              <p class=\"detail-title\">${detail[0]}</p>\r\n              <p class=\"detail-data\">${detail[1]}</p>\r\n            </li>\r\n          `\r\n            )\r\n            .join('')}\r\n          </ol>\r\n      </section>\r\n  `)\r\n  );\r\n}\r\n\r\nfunction renderWeeklyForecast(data, targetElement, unit) {\r\n  console.log(data);\r\n  targetElement.appendChild(\r\n    htmlElementFactory(`\r\n      <section class=\"weekly-forecast\">\r\n        <h2 class=\"forecast-title\">Weekly Forecast</h2>\r\n        <ol class=\"days-of-week\">\r\n          ${(() => {\r\n            let listElements = [];\r\n            for (let i = 1; i < 9; i++) {\r\n              const dayObjectFromData = data.forecast.forecastday[i];\r\n              const avarageTemp =\r\n                unit === 'c'\r\n                  ? dayObjectFromData.day.avgtemp_c\r\n                  : dayObjectFromData.day.avgtemp_f;\r\n              const minTemp =\r\n                unit === 'c'\r\n                  ? dayObjectFromData.day.mintemp_c\r\n                  : dayObjectFromData.day.mintemp_f;\r\n              const maxWind =\r\n                unit === 'c'\r\n                  ? (dayObjectFromData.day.maxwind_kph * 0.277777778).toFixed(1)\r\n                  : dayObjectFromData.day.maxwind_mph;\r\n              console.log(dayObjectFromData);\r\n              listElements.push(`            \r\n            <li>\r\n              <p class=\"day\">\r\n                <span class=\"day-name\">${dayObjectFromData.date}</span>\r\n                <span class=\"daily-temp\">${avarageTemp}째${unit.toUpperCase()}</span>\r\n                <span class=\"daily-night-temp\">${minTemp}째${unit.toUpperCase()}</span>\r\n                <span class=\"daily-wind-speed\">${maxWind}</span>\r\n              </p>\r\n            </li>`);\r\n            }\r\n            return listElements.join('');\r\n          })()}\r\n        </ol>\r\n      </section>\r\n  `)\r\n  );\r\n}\r\n\r\nexport default async function renderWeather(fetchFn, unit, targetElement) {\r\n  targetElement.innerHTML = '';\r\n  const data = await fetchFn;\r\n  renderCurrentLocation(data, targetElement);\r\n  renderCurrentWeather(data, targetElement, unit);\r\n  renderCurrentWeatherDetails(data, targetElement, unit);\r\n  renderWeeklyForecast(data, targetElement, unit);\r\n}\r\n"],"names":["html","template","document","createElement","innerHTML","trim","content","firstElementChild","async","renderWeather","fetchFn","unit","targetElement","data","appendChild","location","name","country","current","last_updated","renderCurrentLocation","condition","temperature","temp_c","temp_f","feelsLikeTemp","feelslike_c","feelslike_f","icon","toUpperCase","text","renderCurrentWeather","forecast","forecastday","wind","wind_kph","toFixed","wind_mph","visibility","vis_km","vis_miles","detailsFromData","humidity","uv","cloud","day","daily_chance_of_rain","astro","sunrise","sunset","moon_phase","map","detail","join","renderCurrentWeatherDetails","console","log","listElements","i","dayObjectFromData","avarageTemp","avgtemp_c","avgtemp_f","minTemp","mintemp_c","mintemp_f","maxWind","maxwind_kph","maxwind_mph","push","date","renderWeeklyForecast"],"sourceRoot":""}